<?php
/**
 * @file
 * Main file for module Forbidden File Format.
 */

/**
 * Implements hook_form_FORM_ID_alter() for field_config_edit_form().
 */
function fff_form_field_config_edit_form_alter(&$form, $form_state) {
	$field = $form_state->getFormObject()->getEntity();
	if ($field->get('field_type') == 'file') {
		// Get default value from instance.
		$form['settings']['file_extensions_disallowed'] = array(
			'#type' => 'checkbox',
			'#title' => t('Allow all file extensions except specified below'),
			'#description' => t('Enable this checkbox if you want to load all files with extensions except described below'),
			'#weight' => 0,
			'#default_value' => $field->getThirdPartySetting('fff', 'file_extensions_disallowed', 0),
		);

		$form['settings']['file_extensions']['#weight'] = $form['settings']['file_extensions_disallowed']['#weight'] + 1;
	}
	$form['#entity_builders'][] = 'fff_form_field_config_edit_form_builder';
}

/**
 * Entity builder for the field config form.
 * Gives opportunity to get the entity values from form.
 */
function fff_form_field_config_edit_form_builder($entity_type, $type, &$form, $form_state) {
	$type->setThirdPartySetting('fff', 'file_extensions_disallowed', $form_state->getValue('settings')['file_extensions_disallowed']);
}

/**
 * Check that file has not disallowed extensions.
 */
function fff_file_validate_disallowed_extensions($file, $extensions) {
	$errors = array();

	$regex = '/\.(' . preg_replace('/ +/', '|', preg_quote($extensions)) . ')$/i';
	if (preg_match($regex, $file->getFilename())) {
		$errors[] = t('Files with the following extensions are not allowed: %files-not-allowed.', array('%files-not-allowed' => $extensions));
	}
	return $errors;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function fff_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
	$field_definition = $context['items']->getFieldDefinition();
	$field_type = $field_definition->getType();
	if ($field_type == 'file') {
		$extensions_disallowed = $field_definition->getThirdPartySetting('fff', 'file_extensions_disallowed', 0);
		$settings = $field_definition->getSettings();
		if ($extensions_disallowed && !empty($settings['file_extensions'])) {
			// Add validator for disallowed extensions.
			$element['#upload_validators']['fff_file_validate_disallowed_extensions'] = array($settings['file_extensions']);

			$cardinality = $field_definition->getFieldStorageDefinition()->getCardinality();

			// Single element.
			if ($cardinality == 1) {
				// Update description of the field.
				$description = $field_definition->getDescription();
				$description .= '<br />' . t('Disallowed file types: @extensions.', array('@extensions' => $settings['file_extensions']));

				// Unset the file extensions to generate description of the field correctly and avoid notices.
				unset($element['#upload_validators']['file_validate_extensions']);
				$file_upload_help = array(
					'#theme' => 'file_upload_help',
					'#description' => $description,
					'#cardinality' => $field_definition->getFieldStorageDefinition()
						->getCardinality(),
					'#upload_validators' => $element['#upload_validators'],
				);

				$element['#description'] = \Drupal::service('renderer')->renderPlain($file_upload_help);
			}
			// Multiple element.
			else {
				$element['#pre_render'][] = 'fff_file_field_pre_render';
			}

			// Allow to load absolutely all files for standard validator.
			$element['#upload_validators']['file_validate_extensions'] = array();
		}
	}
}

/**
 * Pre-render handler.
 */
function fff_file_field_pre_render($element) {
	// Unset the file extensions to generate description of the field correctly and avoid notices.
	unset($element['#upload_validators']['file_validate_extensions']);

	$file_upload_help = array(
		'#theme' => 'file_upload_help',
		'#description' => t(
			'Disallowed file types: @extensions.',
			array(
				'@extensions' => implode(',', $element['#upload_validators']['fff_file_validate_disallowed_extensions']),
			)
		),
		'#cardinality' => $element['#cardinality'],
		'#upload_validators' => $element['#upload_validators'],
	);

	$element['#description'] = \Drupal::service('renderer')->renderPlain($file_upload_help);
	// Allow to load absolutely all files for standard validator.
	$element['#upload_validators']['file_validate_extensions'] = array();

	return $element;
}