<?php

/**
 * @file
 * Contains modules_weight.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\filter\FilterPluginCollection;

/**
 * Implements hook_help().
 */
function modules_weight_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help.
    case 'help.page.modules_weight':
      // Loading the drush command file.
      module_load_include('inc', 'modules_weight', 'modules_weight.drush');

      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Sometimes we need to modify modules execution order, and some people could write a code that execute the query to modify the weight of a module in the system table, some one might go straight to his favorite SQL client and modify the record directly. This module provides an interface to reorder the weight modules.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Configuring the module') . '</dt>';
      $output .= '<dd>' . t('You can manage the module settings from the <a href="@config-page">Modules Weight Settings</a> page. For this you need the <em>Administer Modules Weight</em> permission.', ['@config-page' => Url::fromRoute('modules_weight.modules_weight_admin_settings')->toString()]) . '</dd>';
      $output .= '<dt>' . t('Changing the modules weight') . '</dt>';
      $output .= '<dd>' . t('You can select the weight for all the installed and compatible modules according to the module settings from the <a href="@config-page">Modules Weight</a> page. For this you need the <em>Administer Modules Weight</em> permission.', ['@config-page' => Url::fromRoute('modules_weight.list_page')->toString()]) . '</dd>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Drush commands') . '</h3>';
      // Adding the drush command help information.
      $output .= _modules_weight_drush_get_drush_command_help();

      return $output;
  }
}

/**
 * Array sorting callback; sorts modules by their weight.
 */
function _modules_weight_sort_modules_by_weight($a, $b) {
  if ($a->weight == $b->weight) {
    return 0;
  }
  return ($a->weight < $b->weight) ? -1 : 1;
}

/**
 * Prepares the delta for the weight field on the administration form.
 *
 * If a module has a weight higher then 100 (or lower than 100), it will use
 * that value as delta and the '#weight' field will turn into a textfield most
 * likely.
 *
 * @param int $weight
 *   The weight.
 *
 * @return int
 *   The weight.
 */
function _modules_weight_prepare_delta($weight) {
  $delta = 100;
  if ((int) $weight > $delta) {
    return (int) $weight;
  }
  if ((int) $weight < -100) {
    return (int) $weight * -1;
  }

  return $delta;
}

/**
 * Return the modules list.
 *
 * @param bool $force
 *   Force to show the core modules.
 *
 * @return array
 *   The modules list.
 */
function _modules_weight_modules_list($force = FALSE) {
  // Getting the module list.
  $modules = system_rebuild_module_data();

  if ($force) {
    $show_system_modules = TRUE;
  }
  else {
    // Getting the config to know of we should show or not the core modules.
    $show_system_modules = \Drupal::config('modules_weight.settings')->get('show_system_modules');
  }

  // Iterate over each of the modules.
  foreach ($modules as $filename => $module) {
    if (empty($module->info['hidden']) && $module->status && ($show_system_modules || $module->info['package'] != 'Core')) {

      $compatible = TRUE;

      // Check the core compatibility.
      if ($module->info['core'] != \Drupal::CORE_COMPATIBILITY) {
        $compatible = FALSE;
      }

      // This module is compatible with the currently installed PHP version?
      if (version_compare(phpversion(), $module->info['php']) < 0) {
        $compatible = FALSE;
      }

      // If this module is not compatible it will not be show.
      if (!$compatible) {
        unset($modules[$filename]);
      }
    }
    else {
      unset($modules[$filename]);
    }
  }
  // Sorting all modules by their weight.
  uasort($modules, '_modules_weight_sort_modules_by_weight');

  return $modules;
}

/**
 * Return the drush command help html.
 *
 * @return string
 *   The drush command help html.
 */
function _modules_weight_drush_get_drush_command_help() {
  $drush_commands = modules_weight_drush_command();

  foreach ($drush_commands as $command => $definition) {
    // The details drush command element container.
    $section[$command] = [
      '#type' => 'details',
      '#title' => $command,
      '#description' => $definition['description'],
      '#open' => FALSE,
    ];

    // Examples.
    if (isset($definition['examples'])) {
      $rows = [];
      // Iterating over each example.
      foreach ($definition['examples'] as $example_command => $section_definition) {
        $rows[] = [$example_command, $section_definition];
      }
      // Examples render array.
      $section[$command]['examples'] = [
        '#type' => 'table',
        '#caption' => t('Examples'),
        '#header' => [
          t('Command'),
          [
            'data' => t('Description'),
            // Hidding the description on narrow width devices.
            'class' => [RESPONSIVE_PRIORITY_MEDIUM],
          ],
        ],
        '#rows' => $rows,
        '#sticky' => TRUE,
      ];
    }

    // Arguments.
    if (isset($definition['arguments'])) {
      $rows = [];
      // Iterating over each argument.
      foreach ($definition['arguments'] as $example_command => $section_definition) {
        // Sometimes we can have links in the drush descriptions, so we need to
        // extract it and convert it in links (in the Drupal way) to be
        // displayed in the Drupal interface.
        // Searching if the description have links inside to convert it.
        $section_definition = _modules_weight_convert_plain_url_in_link($section_definition);

        $rows[] = [$example_command, $section_definition];
      }
      // Arguments render array.
      $section[$command]['arguments'] = [
        '#type' => 'table',
        '#caption' => t('Arguments'),
        '#header' => [t('Name'), t('Description')],
        '#rows' => $rows,
        '#sticky' => TRUE,
      ];
    }

    // Options.
    if (isset($definition['options'])) {
      $rows = [];
      // Iterating over each option.
      foreach ($definition['options'] as $example_command => $section_definition) {
        $example_command = '--' . $example_command;
        // Verifying that we have example-value.
        if (isset($section_definition['example-value'])) {
          // Checking for the value.
          switch ($section_definition['value']) {
            case 'optional':
              $example_command .= '=[' . $section_definition['example-value'] . ']';
              break;

            // By default is required.
            default:
              $example_command .= '=<' . $section_definition['example-value'] . '>';
          }
        }
        // Sometimes we can have links in the drush descriptions, so we need to
        // extract it and convert it in links (in the Drupal way) to be
        // displayed in the Drupal interface.
        // Searching if the description have links inside to convert it.
        $section_definition['description'] = _modules_weight_convert_plain_url_in_link($section_definition['description']);

        $rows[] = [$example_command, $section_definition['description']];
      }
      // Options render array.
      $section[$command]['options'] = [
        '#type' => 'table',
        '#caption' => t('Options'),
        '#header' => [t('Name'), t('Description')],
        '#rows' => $rows,
        '#sticky' => TRUE,
      ];
    }

    // Alias.
    if (isset($definition['aliases'])) {
      $rows = [];
      // Iterating over all the aliases.
      foreach ($definition['aliases'] as $alias) {
        $rows[] = $alias;
      }
      // Aliases render array.
      $section[$command][] = [
        '#markup' => '<div id="aliases">' . t('Aliases') . '</div>',
      ];
      // List of aliases.
      $section[$command]['aliases'] = [
        '#theme' => 'item_list',
        '#items' => $rows,
        '#context' => ['list_style' => 'comma-list'],
      ];
    }
  }
  // Attaching css styles.
  $section[$command]['aliases']['#attached']['library'][] = 'modules_weight/help_page';
  // Rendering all the elements.
  $drush_command_html = \Drupal::service('renderer')->render($section);

  return $drush_command_html;
}

/**
 * Convert plain url to links in a given string.
 *
 * @param string $string
 *   The string to review.
 *
 * @return string
 *   The new string.
 */
function _modules_weight_convert_plain_url_in_link($string) {
  // The text processing filters service.
  $manager = \Drupal::service('plugin.manager.filter');
  // Getting the filter plugin collection.
  $filter_collection = new FilterPluginCollection($manager, []);
  // Getting the filter_url plugin.
  $filter = $filter_collection->get('filter_url');

  // Setting the filter_url plugin configuration.
  $filter->setConfiguration([
    'settings' => [
      'filter_url_length' => 496,
    ],
  ]);

  // Applying the filter.
  $html['#markup'] = _filter_url($string, $filter);
  // Rendering the element.
  $result = \Drupal::service('renderer')->render($html);

  return $result;
}
